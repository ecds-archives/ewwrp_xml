<project name="EWWRP Data Preparation" default="all" basedir="." xmlns:xdb="http://exist-db.org/ant">

<target name="all" depends="xml,add-ids,clean,final-info" 
 description="* Add ids, convert entities to unicode, validate, and clean up"/>

<!-- documentation about software requirements for this build, and
where to get them 
(FIXME: incomplete) -->
<target name="reqs" 
	description="* Requirements and instructions for environment setup">
 <echo level="info">Software requirements for this build:
cvs access:
	uses your $CVSROOT environment variable; make sure it is correct
image tasks:
	mogrify (part of ImageMagick)
	jsch.jar required for scp (to transfer files to server)
eXist tasks:
	exist jar files

jar files should either be copied to the $ANT_HOME/lib directory,
or installed elsewhere and added to your $CLASSPATH
</echo>

</target>

<!-- final info for user: where files are, what to do next -->

<target name="config">
  <echo level="info" message="Loading configuration settings."/>
  <echo level="info" message="*******************************"/>

  <!-- import settings from config file -->
  <xmlproperty file="build-config.xml"/>

<!-- user-readable printout of settings loaded from config file -->

  <echo level="info">Data input        : ${config.input}
Using the following settings for loading data:
   server         : ${config.db.server}
   port           : ${config.db.port}
   collection     : ${config.db.collection}
   username       : ${config.db.user}</echo>

  <echo level="info" message="Defining parameters."/>
  <property name="xmldir"     value="${basedir}/docs"/>
  <property name="workdir"     value="${xmldir}/tmp"/>
  <property name="workdir.entities"     value="${workdir}/entities"/>
  <property name="workdir.id"     value="${workdir}/id"/>
  <property name="workdir.whitespace"     value="${workdir}/whitespace"/>

  <!-- directories for image tasks -->
  <property name="imgdir"     value="${basedir}/img"/>
  <property name="imgdir.thumbs"     value="${imgdir}/thumbs"/>



  <property environment="env"/> <!-- provides access to environment variables -->
  <path id="base.path">
    <pathelement path="${env.CLASSPATH}"/>
  </path>
  <property name="env.PERL_INCS" value="${basedir}"/> 

  <property name="scriptdir"     value="scripts"/>
  <!-- for cvs checkout, directory name must not be nested or relative -->
  <property name="fw"     value="frameworkCommon"/>
  <property name="utils"     value="cti-utilities"/>

  <!-- cvs repositories used by this build -->
  <property name="cvs.utils" value="cti-utilities/scripts"/>
  <property name="cvs.fw" value="frameworkCommon/dataPrep"/>

  <!-- cvs scripts/resources used by this build -->
  <property name="idscript" value="add_ids.pl"/>

  <property name="entityscript" value="convertEntities2Unicode_controller.pl"/>
  <property name="entityscript.dep1" value="convertEntities2Unicode.pl"/>
  <property name="entityscript.dep2" value="entity_list.pl"/>

  <property name="whitespacexsl" value="whitespace.xsl"/>

  <!-- create main document directory -->
  <mkdir dir="${xmldir}"/>

</target>


<!-- check out from cvs the scripts needed for this build -->
<target name="cvs" depends="config">

  <!-- create script directory -->
  <mkdir dir="${scriptdir}"/>

  <!-- check out id script -->
  <cvs command="checkout -d ${utils}"
       package="${cvs.utils}/${idscript}"
       quiet="true"
       dest="${scriptdir}"
       cvsRoot="${env.CVSROOT}"
  /> 

  <!-- check out unicode entity script -->
  <cvs command="checkout -d ${fw}"
       package="${cvs.fw}/${entityscript}"
       quiet="true"
       dest="${scriptdir}"
       cvsRoot="${env.CVSROOT}"
  />
  <!-- unicode entity script dependencies -->
 <cvs command="checkout -d ${fw}"
       package="${cvs.fw}/${entityscript.dep1}"
       quiet="true"
       dest="${scriptdir}"
       cvsRoot="${env.CVSROOT}"
  /> 
  <cvs command="checkout -d ${fw}"
       package="${cvs.fw}/${entityscript.dep2}"
       quiet="true"
       dest="${scriptdir}"
       cvsRoot="${env.CVSROOT}"
  /> 

  <!-- check out unicode entity script -->
  <cvs command="checkout -d ${fw}"
       package="${cvs.fw}/${whitespacexsl}"
       quiet="true"
       dest="${scriptdir}"
       cvsRoot="${env.CVSROOT}"
  />


   <!-- add these script directories to the path -->
   <path id="path">
     <pathelement path="${env.PATH}"/>
     <pathelement location="${scriptdir}/${fw}"/>
     <pathelement location="${scriptdir}/${.utils}"/>
   </path>

</target>




<target name="xml" depends="input,unicode-entities,whitespace,validate" 
   description="* convert entities to unicode and validate"/>


<!-- copy xml files from input directory to build xml dir -->
<target name="input" depends="config">

 <echo level="info" message="Copying xml files from input directory to ${xmldir}."/>
 <echo level="info" message="****************************************************"/>

 <copy todir="${xmldir}" overwrite="true">
   <fileset dir="${config.input}" includes="*.xml"/>
 </copy>

</target>


<target name="unicode-entities" depends="config,cvs">
 <!-- description="* converts entities to unicode entities " -->

 <echo level="info" message="Converting sgml entities to unicode entities."/>
 <echo level="info" message="**********************************************"/>

 <mkdir dir="${workdir}"/>
 <!-- delete entity dir just in case, to get rid of any old files -->
 <delete dir="${workdir.entities}"/>
 <mkdir dir="${workdir.entities}"/>

 <exec executable="perl" dir="${scriptdir}/${fw}" failonerror="true">
   <arg line="${entityscript} -i ${xmldir} -o ${workdir.entities} -norename"/>
 </exec>

 <!-- copy files back to main xml dir and replace earlier version of files -->
 <copy todir="${xmldir}" overwrite="true">
   <fileset dir="${workdir.entities}" includes="*.xml"/>
 </copy>

</target> <!-- end unicode-entities -->

<target name="whitespace" depends="config,cvs">
 <mkdir dir="${workdir}"/>
 <!-- delete whitespace dir just in case, to get rid of any old files -->
 <delete dir="${workdir.whitespace}"/>
 <mkdir dir="${workdir.whitespace}"/>


  <!-- replace & with || so entities will not get resolved -->
  <replace dir="${xmldir}" value="||">
    <include name="*.xml"/>
    <replacetoken><![CDATA[&]]></replacetoken>
  </replace>

  <!-- clean up white space -->
  <xslt style="${scriptdir}/${fw}/whitespace.xsl" 
	destdir="${workdir.whitespace}" basedir="${xmldir}"  extension=".xml"/> 

  <!-- copy files back to main xml dir and replace earlier version of files -->
  <copy todir="${xmldir}" overwrite="true">
    <fileset dir="${workdir.whitespace}" includes="*.xml"/>
  </copy>

  <!-- convert || back to & -->
  <replace dir="${xmldir}" token="||" includes="*.xml">
    <replacevalue><![CDATA[&]]></replacevalue>
  </replace> 

</target>


<target name="validate" depends="config">
  <xmlvalidate  lenient="true" failonerror="true" warn="true" classpath="${classpath}">
    <fileset dir="${xmldir}" includes="*.xml"/>
    <dtd publicId="${config.dtd.publicid}" location="${config.dtd.location}"/>
  </xmlvalidate>

  <!-- If we get to this point, it worked. --> 
  <echo level="info" message="Successfully validated all xml files."/>
</target>



<!-- add ids to specified elements (doesn't replace existing ids) -->
<target name="add-ids" depends="config,cvs">   
 <echo level="info" message="Add id attributes to xml files."/>
 <echo level="info" message="*******************************"/>


  <!-- get rid of any old files from a previous run -->
  <delete dir="${workdir.id}"/>
  <mkdir dir="${workdir.id}"/>

  <exec executable="perl"  dir="${basedir}" failonerror="true">
   <arg line="${scriptdir}/${utils}/${idscript} -d ${xmldir} -o ${workdir.id} -t TEI"/>
  </exec>

  <copy todir="${xmldir}" overwrite="true">	<!-- replace earlier version of files -->
    <fileset dir="${workdir.id}" includes="*.xml"/>
  </copy>

</target>


<!-- targets for image processing -->

<target name="image-config" depends="config">
  <echo level="info" message="Loading configuration settings for processing images."/>
  <echo level="info" message="*****************************************************"/>

  <!-- settings from config file already imported by main config target-->

<!-- user-readable printout of settings loaded from config file -->

  <echo level="info">Using the following image input directory:
   images       : ${config.image.input}
Using the following settings for image processing:
   pagesize     : ${config.image.size.page}
   thumbnail    : ${config.image.size.thumbnail}
   jpeg quality : ${config.image.quality}</echo>

<!-- working directories defined in main config target:
	imgdir and imgdir.thumbs
  -->

<!-- pattern sets for matching files -->
  <patternset id="tiffs">
    <include name="*.tif"/>
    <include name="*.tiff"/>
  </patternset>

  <patternset id="jpegs">
    <include name="*.jpg"/>
    <include name="*.jpeg"/>
  </patternset>
 
</target> <!-- end target image-config -->


<!-- FIXME: need to double-check with Erika about clean-up for image target -->
<target name="images" depends="image-config,images-resize,image-thumbs,load-images,clean" 
 description="* Convert images to jpeg format, resize, create thumbnails, and copy to server"/> 


<target name="images-resize" depends="image-config">
 <!-- move tiff images to working directory, convert & resize to page-image dimensions --> 

  <!-- make sure image dir is empty -->
  <delete dir="${imgdir}"/>
  <mkdir dir="${imgdir}"/>

 <!-- copy tiff images from image input dir to working directory -->
  <copy todir="${config.image.input}">
    <fileset  dir="${config.image.input}">
     <patternset refid="tiffs"/>
    </fileset>
  </copy>

  <!-- use mogrify to resize and convert to jpg -->
  <echo level="info" message="Running mogrify to resize and convert to jpeg in ${imgdir}."/>
  <echo level="info" message="   mogrify -format jpg -resize ${config.image.size.page} -quality ${config.image.quality}"/>
  <apply executable="mogrify" parallel="true" failonerror="true" skipemptyfilesets="true" 
	dir="${imgdir}">
   <arg line="-format jpg -resize ${config.image.size.page} -quality ${config.image.quality}"/>
   <fileset dir="${imgdir}">
     <patternset refid="tiffs"/>
   </fileset>
 </apply>

  <!-- delete tiff files copied from input dir to working dir (no longer needed) -->
  <delete>
    <fileset dir="${config.dir.images}">
      <patternset refid="tiffs"/>
    </fileset>
  </delete>

</target>  <!-- end target images-resize -->

<!-- generate thumbnails from jpegs -->
<!-- <target name="image-thumbs" depends="image-config"
if="config.dir.images.exists"> -->
<target name="image-thumbs" depends="image-config">

<!-- make sure thumbnail dir is empty before using it -->
<delete dir="${imgdir.thumbs}"/>
<mkdir dir="${imgdir.thumbs}"/>

<!-- copy resized jpeg images to thumbnail directory -->
  <copy todir="${imgdir.thumbs}">
    <fileset dir="${imgdir}">
     <patternset refid="jpegs"/>
    </fileset>
  </copy>

<!-- use mogrify to create thumbnails -->
 <echo level="info" message="Running mogrify to generate thumbnails in ${imgdir.thumbs}."/>
 <echo level="info" message="   mogrify -format jpg -resize ${imgdir.thumbs}"/>
 <apply executable="mogrify" parallel="true" failonerror="true" skipemptyfilesets="true" 
	dir="${imgdir.thumbs}" >
   <arg line="-format jpg -resize ${config.image.size.thumbnail}"/>
   <fileset dir="${imgdir.thumbs}">
     <patternset refid="jpegs"/>
   </fileset>
 </apply>

</target>  <!-- end target image-thumbs -->

<!-- <target name="ask-imgload" depends="config"
if="config.dir.images.exists"> -->
<target name="ask-imgload" depends="config">
  <input
    message="Would you like to copy the image files to the webserver? "
    validargs="y,n"
    addproperty="response"
  />
  <condition property="do.imgload">
    <equals casesensitive="false" arg1="y" arg2="${response}"/>
  </condition>
</target>  <!-- ask-imgload -->


<!-- note: this version of load-images asks user before transferring
    files. -->
<!-- <target name="load-images" depends="config,ask-imgload"
if="do.imgload" description="* Copy images and thumbnails to
webserver" > -->
<target name="load-images" depends="config" description="* Copy images and thumbnails to webserver" >

  <!-- scp is an optional target; must have jsch.jar file in ant lib -->

  <!-- copy all images to main image directory -->
  <scp todir="${config.image.load.user}@${config.image.load.server}:${config.image.load.imgdir}" 
	keyfile="${config.image.load.key}" 
	passphrase="">
    <fileset dir="${config.dir.images}">
      <patternset refid="jpegs"/>
    </fileset>
  </scp>


  <!-- copy thumbnails to thumbnail subdirectory -->
  <scp todir="${config.image.load.user}@${config.image.load.server}:${config.image.load.thumbdir}" 
	keyfile="${config.image.load.key}" passphrase="${config.image.load.passphrase}">
    <fileset dir="${config.dir.images.thumbnails}">
      <patternset refid="jpegs"/>
    </fileset>
  </scp> 

</target>

<target name="final-info" depends="config">
<echo level="info">The final copy of your built XML files are now in ${xmldir}.
Please check these files, and if you are satisified with them, 
copy them back to your cvs directory and check them back into cvs.</echo>
</target>

<!-- remove all temporary non-final files created by the build -->
<target name="clean" depends="config">
 <delete dir="${workdir}"/>
 <delete dir="${imgdir}"/>
</target>

<!-- remove all input files used in a previous build -->
<target name="cleanall" depends="config,clean" 
description="* Remove all temporary files and input files from a previous build">
 <delete>
   <fileset dir="${xmldir}" includes="*.xml"/>
 </delete>
</target>



<target name="exist-load" depends="config" 
  description="* load files to exist">

  <!-- import exist ant tasks -->
  <taskdef resource="org/exist/ant/antlib.xml" uri="http://exist-db.org/ant" />

  <xdb:store uri="xmldb:exist://${config.db.server}:${config.db.port}/exist/xmlrpc/db/${config.db.collection}"
	createcollection="false" user="${config.db.user}" password="${config.db.password}">
	<fileset dir="${xmldir}">
	  <include name="*.xml"/>
	</fileset>
  </xdb:store>

</target>

</project>